// 橡皮筋.cpp : 定义控制台应用程序的入口点。
//

#include<gl/glut.h>
static int imode = 1;
int iPointNum = 0;//已确定点的数目
int x1 = 0, x2 = 0, y1 = 0, y2 = 0;//确定的点坐标
int winWidth = 400, winHeight = 300;//窗口的宽度和高度
void Initial(void)
{
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);//设置窗口背景颜色
}
void ChangeSize(int w, int h)
{
	winWidth = w; winHeight = h;//保存当前窗口的大小
	glViewport(0, 0, w, h);//指定窗口显示区域
	glMatrixMode(GL_PROJECTION);//制定设置投影参数
	glLoadIdentity();//调用单位矩阵，去掉以前的投影参数设置
	gluOrtho2D(0.0, winWidth, 0.0, winHeight);//设置投影参数
}
void Display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);//用当前背景色填充窗口
	glColor3f(1.0f, 0.0f, 0.0f);//指定当前的绘图颜色
	if (iPointNum >= 1&&imode==1){
		glBegin(GL_LINES);//绘制直线段
		glVertex2i(x1, y1);
		glVertex2i(x2, y2);
		glEnd();
	}
	else
	{
		glRectf(x1, y1, x2, y2);
		glFlush();
	}
	glutSwapBuffers();
}
void Key(unsigned char key, int x, int y)
{
	if (imode == 1)
	{
		switch (key)
		{
		case 'p':
			if (iPointNum == 0 || iPointNum == 2){
				iPointNum = 1;
				x1 = x; y1 = winHeight - y;
			}
			else
			{
				iPointNum = 2;
				x2 = x; y2 = winHeight - y;
				glutPostRedisplay();
			}
		default:
			break;
		}
	}
	else
	{
		switch (key)
		{
		case 'p':
			if (iPointNum == 0 || iPointNum == 2){
				iPointNum = 1;
				x1 = x; y1 = winHeight - y;
			}
			else
			{
				iPointNum = 2;
				x2 = x; y2 = winHeight - y;
				glutPostRedisplay();
			}
		default:
			break;
		}
	}
}
void PassiveMouseMove(GLint xMouse, GLint yMouse)
{
	if (iPointNum == 1){
		x2 = xMouse;
		y2 = winHeight - yMouse;
		glutPostRedisplay();
	}
}
void ProcessMenu(int value)
{
	imode = value;      
	glutPostRedisplay();
}
int main(int argc, char*argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(400, 300);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("橡皮筋技术");
	glutCreateMenu(ProcessMenu);
	glutAddMenuEntry("直线", 1);     
	glutAddMenuEntry("矩形", 2);      
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutDisplayFunc(Display);
	glutReshapeFunc(ChangeSize);
	glutKeyboardFunc(Key);
	glutPassiveMotionFunc(PassiveMouseMove);
	Initial();
	glutMainLoop();
	return 0;
}
